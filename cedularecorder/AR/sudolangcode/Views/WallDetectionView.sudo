# Main Wall Detection View
# ~40 lines in Swift

WallDetectionView: View {
  @StateObject coordinator = WallCoordinator()
  @State showMiniMap = true
  @State showControls = true

  var body: some View {
    ZStack {
      # AR View takes full screen
      ARViewContainer(coordinator: coordinator)
        .ignoresSafeArea()

      # HUD Overlay
      VStack {
        # Top Status Bar
        if showControls {
          HStack {
            # Tracking Status
            TrackingStatusPill(quality: coordinator.trackingQuality)

            Spacer()

            # Wall Count
            Label("Walls: \(coordinator.trackedWallCount)", systemImage: "square.split.2x2")
              .padding(.horizontal, 12)
              .padding(.vertical, 6)
              .background(.thinMaterial)
              .cornerRadius(8)
          }
          .padding()
        }

        Spacer()

        # MiniMap
        if showMiniMap {
          HStack {
            Spacer()
            MiniMapView(coordinator: coordinator)
              .frame(width: 200, height: 200)
              .padding()
          }
        }

        # Bottom Controls
        if showControls {
          HStack(spacing: 20) {
            # Toggle MiniMap
            Button(action: { showMiniMap.toggle() }) {
              Image(systemName: showMiniMap ? "map.fill" : "map")
                .font(.title2)
                .frame(width: 44, height: 44)
                .background(.thinMaterial)
                .clipShape(Circle())
            }

            # New Room Button
            Button(action: { coordinator.startNewRoom() }) {
              Label("New Room", systemImage: "plus.square")
                .padding(.horizontal, 16)
                .padding(.vertical, 10)
                .background(.blue)
                .foregroundColor(.white)
                .cornerRadius(20)
            }

            # Reset Button
            Button(action: { coordinator.reset() }) {
              Image(systemName: "arrow.clockwise")
                .font(.title2)
                .frame(width: 44, height: 44)
                .background(.thinMaterial)
                .clipShape(Circle())
            }
          }
          .padding()
        }
      }
    }
    .statusBarHidden()
  }
}

TrackingStatusPill: View {
  let quality: String

  var body: some View {
    HStack(spacing: 6) {
      Circle()
        .fill(statusColor)
        .frame(width: 8, height: 8)

      Text(quality)
        .font(.caption)
        .fontWeight(.medium)
    }
    .padding(.horizontal, 12)
    .padding(.vertical, 6)
    .background(.thinMaterial)
    .cornerRadius(12)
  }

  var statusColor: Color {
    switch quality {
      case "Good": .green
      case "Limited": .yellow
      default: .red
    }
  }
}